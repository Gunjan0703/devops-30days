  1  hostnamectl set-hostname kworker
    2  cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
    3  overlay
    4  br_netfilter
    5  EOF
    6  sudo modprobe overlay
    7  sudo modprobe br_netfilter
    8  cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
    9  net.bridge.bridge-nf-call-iptables  = 1
   10  net.bridge.bridge-nf-call-ip6tables = 1
   11  net.ipv4.ip_forward                 = 1
   12  EOF
   13  sudo sysctl --system
   14  lsmod | grep br_netfilter
   15  lsmod | grep overlay
   16  vi /etc/containerd/config.toml 
   17  systemctl restart containerd
   18  sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
   19  sudo swapoff -a
   20  sudo setenforce 0
   21  sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
   22  cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
   23  [kubernetes]
   24  name=Kubernetes
   25  baseurl=https://pkgs.k8s.io/core:/stable:/v1.26/rpm/
   26  enabled=1
   27  gpgcheck=1
   28  gpgkey=https://pkgs.k8s.io/core:/stable:/v1.26/rpm/repodata/repomd.xml.key
   29  exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni
   30  EOF
   31  sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
   32  sudo systemctl enable --now kubelet
   33  sudo apt-get update
   34  # apt-transport-https may be a dummy package; if so, you can skip that package
   35  sudo apt-get install -y apt-transport-https ca-certificates curl
   36  curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.26/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
   37  cd /etc/apt/sources.list.d/kubernetes.list 
   38  cd /etc/apt/sources.list.d/
   39  ls
   40  rm -rf kubernetes.list 
   41  sudo apt-get update
   42  # apt-transport-https may be a dummy package; if so, you can skip that package
   43  sudo apt-get install -y apt-transport-https ca-certificates curlcurl -fsSL https://pkgs.k8s.io/core:/stable:/v1.26/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
   44  echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.26/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
   45  sudo apt-get update
   46  sudo apt-get install -y kubelet kubeadm kubectl
   47  sudo apt-mark hold kubelet kubeadm kubectl
   48  kubeadm version
   49  kubectl version
   50  # Add Docker's official GPG key:
   51  sudo apt-get update
   52  sudo apt-get install ca-certificates curl
   53  sudo install -m 0755 -d /etc/apt/keyrings
   54  sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
   55  sudo chmod a+r /etc/apt/keyrings/docker.asc
   56  # Add the repository to Apt sources:
   57  echo   "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
   58    $(. /etc/os-release && echo "$VERSION_CODENAME") stable" |   sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
   59  sudo apt-get update
   60  sudo apt-get install  containerd.io 
   61  ls
   62  cd /etc/containerd/
   63  ls
   64  mv * /tmp/
   65  vi config.toml
   66  systemctl restart containerd
   67  sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
   68  sudo swapoff -a
   69  watch -n 1 kubectl get po -n kube-system
   70  ip a
   71  kubeadm init
   72  mkdir -p $HOME/.kube
   73  kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml
   74  watch -n 1 kubectl get pods -n kube-system
   75  git clone https://github.com/Prashanth7993/Project-D1
   76  cd Project-D1/
   77  kubectl get nodes
   78  kubectl taint node ip-172-31-46-98 node-role.kubernetes.io/control-plane:NoSchedule-
   79  cd Kubernetes/
   80  ls
   81  kubectl get ns project-d1
   82  kubectl create ns project-d1
   83  kubectl get ns project-d1
   84  kubectl config set-context --current --namespace=project-d1
   85  kubectl apply -f pv.yaml
   86  kubectl apply -f pvc.yaml
   87  kubectl apply -f mysql-deploy.yaml 
   88  kubectl get po
   89  kubectl get pvc
   90  kubectl get po
   91  docker exec -it mysql-deploy-0 
   92  kubectl exec -it mysql-deploy-0 
   93  kubectl exec -it mysql-deploy-0 -- /bin/bash
   94  ls
   95  cd
   96  cd -
   97  cd ..
   98  ls
   99  cd Backend-Java/
  100  ls
  101  cd Event_Managment/
  102  ls
  103  cd src/
  104  cd 
  105  cd -
  106  cd main/java/com/EventManagment/
  107  cd Con
  108* lst
  109  cd Controllers/
  110  ls
  111  vi AttendeeController.java 
  112  ls
  113  vi AttendeeController.java 
  114  cd ..
  115  cd..
  116  cd ..
  117  cd Kubernetes/
  118  ls
  119  history
  120  ls
  121  kubectl apply -f mysl-service.yaml
  122  kubectl apply -f mysql-service.yaml
  123  kubectl get svc
  124  kubectl apply -f springboot-deploy.yaml 
  125  kubect get po
  126  kubectl get po
  127  vi java-springboot-service.yaml 
  128  kubectl apply -f java-springboot-service.yaml 
  129  kubectl get svc
  130  ls
  131  apt install docker.io
  132  sudo apt install docker.io
  133  snap install docker.io
  134  snap install docker
  135  cd ..
  136  ls
  137  cd Backend-Java/
  138  ls
  139  cd Event_Managment/
  140  ls
  141  docker build -t back-end .
  142  cd ..
  143  cd Event_Managment/src/main/java/com/EventManagment/Controllers/
  144  ls
  145  vi EventController.java 
  146  vi TaskController.java 
  147  cd -
  148  docker images
  149  docker login
  150  docker -t back-end:latest gunjan1603/3-tier-deployment:latest
  151  docker tag back-end:latest gunjan1603/3-tier-deployment:latest
  152  docker push gunjan1603/3-tier-deployment:latest
  153  cd ..
  154  cd Kubernetes/
  155  ls
  156  vi springboot-deploy.yaml 
  157  kubectl apply -f springboot-deploy.yaml 
  158  vi java-springboot-service.yaml 
  159  kubectl apply -f java-springboot-service.yaml 
  160  kubectl get svc
  161  cat springboot-deploy.yaml 
  162  q
  163  cat java-springboot-service.yaml
